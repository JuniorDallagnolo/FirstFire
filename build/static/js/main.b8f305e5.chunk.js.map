{"version":3,"sources":["firebase.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","name","email","phone","contacts","handleChange","bind","assertThisInitialized","handleSubmit","ev","setState","defineProperty","target","value","preventDefault","database","ref","contact","push","id","concat","remove","_this2","on","snapshot","items","val","newList","item","_this3","react_default","a","createElement","className","onSubmit","type","placeholder","onChange","map","key","onClick","removeItem","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b8f305e5.chunk.js","sourcesContent":["import firebase from \"firebase\";\nvar config = {\n  apiKey: \"AIzaSyC1JWwEIbAj_gRaSD_MGLvp2iJabhJIguM\",\n  authDomain: \"firstfire-9135.firebaseapp.com\",\n  databaseURL: \"https://firstfire-9135.firebaseio.com\",\n  projectId: \"firstfire-9135\",\n  storageBucket: \"firstfire-9135.appspot.com\",\n  messagingSenderId: \"8268938127\"\n};\nfirebase.initializeApp(config);\nexport default firebase;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport firebase from \"./firebase\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      name: \"\",\n      email: \"\",\n      phone: \"\",\n      contacts: []\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(ev) {\n    this.setState({\n      [ev.target.name]: ev.target.value\n    });\n  }\n\n  handleSubmit(ev) {\n    ev.preventDefault();\n    const contacts = firebase.database().ref(\"Contacts\");\n    const contact = {\n      name: this.state.name,\n      email: this.state.email,\n      phone: this.state.phone\n    };\n    contacts.push(contact);\n    this.setState({ name: \"\", email: \"\", phone: \"\" });\n  }\n\n  removeItem(id) {\n    const ref = firebase.database().ref(`/Contacts/${id}`);\n    ref.remove();\n  }\n\n  componentDidMount() {\n    const list = firebase.database().ref(\"Contacts\");\n    list.on(\"value\", snapshot => {\n      let items = snapshot.val();\n      let newList = [];\n      for (let item in items) {\n        newList.push({\n          id: item,\n          name: items[item].name,\n          email: items[item].email,\n          phone: items[item].phone\n        });\n      }\n      this.setState({\n        contacts: newList\n      });\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <header>\n          <div className=\"wrapper\">\n            <h1>Contacts List</h1>\n          </div>\n        </header>\n        <div className=\"container\">\n          <section className=\"add-item\">\n            <form onSubmit={this.handleSubmit}>\n              <input\n                type=\"text\"\n                name=\"name\"\n                placeholder=\"Name\"\n                onChange={this.handleChange}\n                value={this.state.name}\n              />\n              <input\n                type=\"email\"\n                name=\"email\"\n                placeholder=\"E-mail\"\n                onChange={this.handleChange}\n                value={this.state.email}\n              />\n              <input\n                type=\"phone\"\n                name=\"phone\"\n                placeholder=\"Phone\"\n                onChange={this.handleChange}\n                value={this.state.phone}\n              />\n              <button>Add Contact</button>\n            </form>\n          </section>\n          <section className=\"display-item\">\n            <div className=\"wrapper\">\n              <ul>\n                {this.state.contacts.map(contact => {\n                  return (\n                    <li key={contact.id}>\n                      <h3>{contact.name}</h3>\n                      <p>Email: {contact.email}</p>\n                      <p>Phone: {contact.phone}</p>\n                      <button\n                        onClick={() => {\n                          this.removeItem(contact.id);\n                        }}\n                      >\n                        Delete Contact\n                      </button>\n                    </li>\n                  );\n                })}\n              </ul>\n            </div>\n          </section>\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}